
# Apache Wave Mod Version

## Features and Objectives

The aims of this MOD of Apache Wave are...

- Allow new data models, not only the conversation model.
- Provide a JavaScript Client API aka WaveJS
- Adapt the indexing system to support new data models.
- Store index in MongoDB to provide easy querying.
- Provide examples of new data models.
- Provide a JavaScript Wrapper / Client to build separated front-ends for new data models.
- Decouple Apache Server from Jetty replacing Jetty Websockets by Atmosphere framework



## Build Web Client Mod

A Web Client modification is provided to play with new types:

```
ant compile

ant compile-gwt-mod
```

Ant targets for Hosted and Superdev mode are also provided.


## Build WaveJS Library


```
ant compile

ant compile-wavejs

or

ant compile-wavejs-dev
```


## Test WaveJS Library

```
ant run-server
```

Browse `http://localhost:9898/test/wavejs.html`. It provides a Web console to launch WaveJS API tests.
It also shows how to use the API.


## Debug WaveJS Library

```
ant run-server

ant hosted-wavejs
```

Browse in a: http://localhost:9898/test/wavejs.html?gwt.codesvr=localhost:9997
This requires a  GWT-debug compatible browser



## Using the WaveJS API in your Web


### Preconditions

* Access to a Wave Mod Server. By default the Wave Server runs at http://localhost:9898.
* An user account. Navigate to http://localhost:9898 and follow the instructions.

See the README file to build and run the Wave Server.


### Import JavaScript WaveJS Client Library

```
<script type="text/javascript" src="http://localhost:9898/wavejs/wavejs.nocache.js"></script>
```

The following method is called when library is fully loaded, from here the WaveJS object is available.

```
  function onWaveJSReady() {
    // Here your code using the WaveJS API:
    // WaveJS.startSession(...
    // WaveJS.open...
    // ...
  }
```


### Start and Stop sessions

In order to work with any collaborative feature you must start a session against the Wave Server with an user's credentials.

```
  WaveJS.startSession("http://localhost:9898", "MyUserName", "MyPassword",
      function(sessionId) {

        // Success Callback


      }, function(error) {

        // Failure Callback

      });
};

```

To stop a session (it disposes resources and connections to the server) use following method:

```
 WaveJS.stopSession();
```




### Create and use a collaborative list

Create a new list:

```
    // Function's return value is the list Id!!!
    var listId =
        WaveJS.createListModel(


           function(listModel) {

                // Attach the created list to the WaveJS
                WaveJS.listModel = listModel;

                // Add a participant to share the list
                WaveJS.listModel.addParticipant("myfriend@local.net");

                // Add a element (only strings are valid now)
                WaveJS.listModel.list.add("my new element");

                // Get list values as a Mutable Array
                WaveJS.listModel.list.values;

                // Remove first element by index (Don't modify the values array directly)
                WaveJS.listModel.list.remove(0);


            },

            function(error) {

              alert("Error creating a collaborative list "+error);

            });
```

Open an existing list with Id = "local.net/dummy+Xxn3-XupCUA":

```
        // We pass the list Id as first parameter

        WaveJS.openListModel("local.net/dummy+Xxn3-XupCUA",

           function(listModel) {

                // Attach the created list to the WaveJS
                WaveJS.listModel = listModel;

                // ...

            },

            function(error) {

              alert("Error openning a collaborative list "+error);

            });
```

Close the collaborative list, it disposes connection and resources:

```
    WaveJS.close("local.net/dummy+Xxn3-XupCUA");
```


## Wave GWT Client

Classes on the package `org.waveprotocol.mod.client.*` can be used in a separate GWT application
to connect to a Wave server.

Separated jars to get a GWT client can be generated by

```
and dist-compact-client

and dist-compact-client-src
```

Running `install-mvn-artifacts.sh` to install GWT client stuff as maven artifacts in a local repo.

These are the mvn dependencies:


    <!-- GWT modules for building a Wave based app -->
    <dependency>
        <groupId>org.waveprotocol</groupId>
        <artifactId>compact-client</artifactId>
        <version>0.4-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>

    <dependency>
        <groupId>org.waveprotocol</groupId>
        <artifactId>compact-client-src</artifactId>
        <version>0.4-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>

    <dependency>
        <groupId>org.waveprotocol</groupId>
        <artifactId>proto</artifactId>
        <version>0.4-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>

    <dependency>
        <groupId>org.waveprotocol</groupId>
        <artifactId>proto-src</artifactId>
        <version>0.4-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>

    <dependency>
        <groupId>org.waveprotocol</groupId>
        <artifactId>proto-msg</artifactId>
        <version>0.4-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>